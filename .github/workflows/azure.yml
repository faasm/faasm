name: "Azure Integration Tests"

# These tests provision resources on Faasm's Azure subscription to run
# integration tests on a production environment. To limit the cost of running
# them, we only trigger them on workflow dispatch. In order to run them, you
# need to navigate to the Actions tab on GitHub, and click the run button
on: workflow_dispatch

defaults:
  run:
    shell: bash

jobs:
  sgx-hw:
    runs-on: self-hosted
    env:
      CLUSTER_NAME_BASE: gha-cluster
    steps:
      - name: "Check out the experiment-base code"
        uses: actions/checkout@v3
        with:
          repository: faasm/experiment-base
          # TODO: remove after merge
          ref: gha
          path: experiment-base
      - name: "Create a unique cluster name"
        # TODO: update with matrix contents
        run: |
          echo "CLUSTER_NAME=${CLUSTER_NAME_BASE}-${{ github.job }}" >> $GITHUB_ENV
          echo ${CLUSTER_NAME}
      - name: "Install kubectl"
        run: ./bin/inv_wrapper.sh k8s.install-kubectl
        working-directory: ${{ github.workspace }}/experiment-base
      - name: "Run invoke once"
        run: ./bin/inv_wrapper.sh -l
        working-directory: ${{ github.workspace }}/experiment-base
      - name: "Check out faasm code, where is it?"
        uses: actions/checkout@v3
        with:
          submodules: true
          path: faasm
      - name: "Run invoke twice"
        run: ./bin/inv_wrapper.sh -l
        working-directory: ${{ github.workspace }}/faasm
          #       - name: "Start a managed k8s cluster on Azure's Kubernetes Service"
          #         # TODO: deploy with a different name (as a parameter) and allow --sgx=False
          #         # TODO: consider using a special path for `.kubeconfig`
          #         run: |
          #           ./bin/inv_wrapper.sh cluster.provision --name ${{ env.CLUSTER_NAME }} --vm Standard_DC4s_v3 --nodes 4 --location eastus2 --sgx
          #           ./bin/inv_wrapper.sh cluster.credentials --name ${{ env.CLUSTER_NAME }}
          #       - name: "Delete cluster"
          #         if: always()
          #         run: ./bin/inv_wrapper.sh cluster.delete --name ${{ env.CLUSTER_NAME }}
