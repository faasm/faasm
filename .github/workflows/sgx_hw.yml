name: "SGX Hardware Mode Tests"

# This workflow runs the set of tests in SGX Hardware mode. We run them on a
# latest-generation IceLake VM on Azure, so we only run them manually on
# workflow dispatch.
on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  sgx-hw:
    runs-on: self-hosted
    env:
      VM_BASE_NAME: gha-sgx-hw-vm
      FAASM_VERSION: 0.9.6
    steps:
      - name: "Check out the experiment-base code"
        uses: actions/checkout@v3
        with:
          repository: faasm/experiment-base
      - name: "Create a unique VM name"
        run: echo "VM_NAME=${VM_BASE_NAME}-${{ github.job }}-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_ENV
      - name: "Create and provision an SGX-enabled IceLake VM"
        run: |
          ./bin/inv_wrapper.sh vm.create --sgx --region eastus2 --name ${{ env.VM_NAME }}
          ./bin/inv_wrapper.sh vm.inventory --prefix ${{ env.VM_NAME }}
          ./bin/inv_wrapper.sh vm.setup
      - name: "Fetch the branch code if necessary"
        run: |
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "git fetch origin ${{ github.ref }}:ci-branch && git checkout -f ci-branch"
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "git submodule update --init -f"
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm/clients/python" \
            --cmd "git submodule update --init -f third-party/cpp"
      - name: "Start the docker compose cluster"
        run: |
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "./bin/refresh_local.sh"
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "docker volume create --driver local --opt type=tmpfs --opt device=tmpfs --opt o=rw aesmd-socket"
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "FAASM_BUILD_MOUNT=/build/faasm FAASM_LOCAL_MOUNT=/usr/local/faasm FAASM_CLI_IMAGE=faasm/cli-sgx:${{ env.FAASM_VERSION }} SGX_DEVICE_MOUNT_DIR=/dev/sgx docker compose up --no-recreate -d aesmd faasm-cli"
      - name: "Cross-compile CPP functions"
        run: |
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "FAASM_LOCAL_MOUNT=/usr/local/faasm docker compose run cpp ./bin/inv_wrapper.sh func.local libfake"
      - name: "Cross-compile Python functions"
        run: |
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "FAASM_LOCAL_MOUNT=/usr/local/faasm docker compose run python ./bin/inv_wrapper.sh cpython.func func.upload-all --local"
      - name: "Build Faasm targets"
        run: |
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "docker compose exec faasm-cli ./bin/inv_wrapper.sh dev.tools --build Release --sgx Hardware"
      - name: "Run codegen"
        run: |
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "docker compose exec faasm-cli ./bin/inv_wrapper.sh codegen.tests"
      - name: "Run tests"
        run: |
          ./bin/inv_wrapper.sh vm.run-command \
            --name ${{ env.VM_NAME }} \
            --path "code/faasm" \
            --cmd "docker compose exec -e LOG_LEVEL=info -e AZ_ATTESTATION_PROVIDER_URL='' -e CGROUP_MODE=off -e HOST_TYPE=ci faasm-cli /build/faasm/bin/tests"
      - name: "Delete VM"
        if: always()
        run: ./bin/inv_wrapper.sh vm.delete --name ${{ env.VM_NAME }}
