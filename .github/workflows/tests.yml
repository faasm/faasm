name: Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  formatting:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-20.04
    container:
      image: faasm/cli:0.6.8
    defaults:
      run:
        working-directory: /usr/local/code/faasm
    steps:
      # --- Get the code ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      - name: "Update submodules"
        run: git submodule update
      # --- Formatting checks ---
      - name: "Ensure all Python deps up-to-date"
        run: pip3 install -r faasmcli/requirements.txt
      - name: "Python formatting check"
        run: ./bin/check_python.sh
      - name: "Run C/C++ formatting"
        run: ./bin/run_clang_format.sh
      - name: "Check C/C++ formatting changes"
        run: git diff --exit-code

  cpp-funcs:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-20.04
    container:
      image: faasm/cpp-sysroot:0.0.28
    defaults:
      run:
        working-directory: /__w/faasm/faasm/clients/cpp
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
      - name: "CPP submodule"
        run: "git submodule update --init clients/cpp"
        working-directory: /__w/faasm/faasm
      - name: "Build C++ functions"
        run: inv func.local
      - name: "Build libfake"
        run: inv libfake
      - name: "Upload cpp wasm"
        uses: actions/upload-artifact@v2
        with:
          name: cpp-wasm
          path: /usr/local/faasm/wasm
      - name: "Upload fake lib wasm"
        uses: actions/upload-artifact@v2
        with:
          name: libfake-wasm
          path: /usr/local/faasm/runtime_root/lib/fake

  py-funcs:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-20.04
    container:
      image: faasm/cpython:0.0.12
    defaults:
      run:
        working-directory: /__w/faasm/faasm/clients/python
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
      - name: "Python submodule"
        run: "git submodule update --init clients/python"
        working-directory: /__w/faasm/faasm
      - name: "Build CPython function"
        run: inv func
      - name: "Put Python functions in place"
        run: inv func.upload-all --local
      - name: "Upload python wasm"
        uses: actions/upload-artifact@v2
        with:
          name: py-wasm
          path: /usr/local/faasm/wasm/python
      - name: "Upload python functions"
        uses: actions/upload-artifact@v2
        with:
          name: py-funcs
          path: /usr/local/faasm/shared

  build:
    if: github.event.pull_request.draft == false
    needs: [cpp-funcs, py-funcs]
    runs-on: ubuntu-20.04
    env:
      CGROUP_MODE: off
      HOST_TYPE: ci
      LOG_LEVEL: info
      MAX_FAASLETS: 5
      NETNS_MODE: off
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/cli:0.6.8
    defaults:
      run:
        working-directory: /usr/local/code/faasm
    services:
      redis:
        image: faasm/redis:0.6.8
        ports:
          - 6379:6379
      minio:
        image: faasm/minio:0.6.8
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
        ports:
          - 9000:9000
    steps:
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      - name: "Update faabric submodule"
        run: git submodule update faabric
      # --- Checks ---
      - name: "Ping redis"
        run: redis-cli -h redis ping
      - name: "Ping minio"
        run: curl -f http://minio:9000/minio/health/live
      # --- Get artifacts from other steps ---
      - name: "Download CPP wasm"
        uses: actions/download-artifact@v2
        with:
          name: cpp-wasm
          path: /usr/local/faasm/wasm
      - name: "Download libfake wasm"
        uses: actions/download-artifact@v2
        with:
          name: libfake-wasm
          path: /usr/local/faasm/runtime_root/lib/fake
      - name: "Download Python wasm"
        uses: actions/download-artifact@v2
        with:
          name: py-wasm
          path: /usr/local/faasm/wasm/python
      - name: "Download Python funcs"
        uses: actions/download-artifact@v2
        with:
          name: py-funcs
          path: /usr/local/faasm/shared
      # --- Host information ---
      - name: "CPU info"
        run: cat /proc/cpuinfo
      - name: "Get CPU model name"
        run: echo "CPU_MODEL=$(./bin/print_cpu.sh)" >> $GITHUB_ENV
      - name: "Print CPU model"
        run: echo "${{ env.CPU_MODEL}}"
      # --- Cache ---
      - name: "Configure machine code cache"
        uses: actions/cache@v2
        with:
          path: /usr/local/faasm/object
          key: ${{ env.CPU_MODEL }}-machine-code
      # --- Code build (Debug required for tests) ---
      - name: "Build dev tools"
        run: inv -r faasmcli/faasmcli dev.tools --build Debug
      # --- Environment set-up ---
      - name: "Run codegen"
        run: inv -r faasmcli/faasmcli codegen.local
      - name: "Run python codegen"
        run: inv -r faasmcli/faasmcli python.codegen
      - name: "Clear existing pyc files"
        run: inv -r faasmcli/faasmcli python.clear-runtime-pyc
      # --- Test run ---
      - name: "Run the tests"
        run: /build/faasm/bin/tests

  dist-tests:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      # --- Code update ---
      - name: "Check out code"
        uses: actions/checkout@v2
      - name: "Update faabric submodule"
        run: git submodule update --init faabric
      - name: "Update cpp client submodule"
        run: git submodule update --init clients/cpp
      # --- Host information ---
      - name: "Get CPU model name"
        run: echo "CPU_MODEL=$(./bin/print_cpu.sh)" >> $GITHUB_ENV
      - name: "Print CPU model"
        run: echo "${{ env.CPU_MODEL}}"
      # --- Cache - use minio directory to share between containers ---
      - name: "Configure S3 cache"
        uses: actions/cache@v2
        with:
          path: ./dev/minio/data/faasm
          key: ${{ env.CPU_MODEL }}-s3-data
      # --- Set up and run ---
      - name: "Build tests"
        run: ./deploy/dist-test/build.sh
      - name: "Build and upload functions for tests"
        run: ./deploy/dist-test/upload.sh
      - name: "Run tests"
        run: ./deploy/dist-test/run.sh

  quick-start:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      PYTHON_CODEGEN: "on"
    steps:
      # --- Code update ---
      - name: "Check out code"
        uses: actions/checkout@v2
      - name: "CPP submodule"
        run: git submodule update --init clients/cpp
      - name: "Python submodule"
        run: git submodule update --init clients/python
      # --- Host information ---
      - name: "Get CPU model name"
        run: echo "CPU_MODEL=$(./bin/print_cpu.sh)" >> $GITHUB_ENV
      - name: "Print CPU model"
        run: echo "${{ env.CPU_MODEL}}"
      # --- Cache - use minio directory to share between containers ---
      - name: "Configure S3 cache"
        uses: actions/cache@v2
        with:
          path: ./dev/minio/data/faasm
          key: ${{ env.CPU_MODEL }}-s3-data
      # --- Setup ---
      - name: "Start docker-compose"
        run: docker-compose up -d --scale worker=2 nginx
      - name: "Wait for upload server to be available"
        run: docker-compose exec -T upload /usr/local/code/faasm/deploy/local/wait_for_upload.sh localhost 8002
      # --- Function upload ---
      - name: "Build and upload cpp function"
        run: docker-compose run -T cpp inv func demo hello func.upload demo hello
      - name: "Build and upload python function"
        run: docker-compose run -T python inv func func.upload func.uploadpy hello
      # --- Function invocation
      - name: "Invoke cpp function"
        run: docker-compose run -T cpp inv func.invoke --host=nginx demo hello
      - name: "Invoke python hello function"
        run: docker-compose run -T python inv func.invoke --host=nginx python hello
      # --- Shutdown ---
      - name: "Stop docker-compose"
        run: docker-compose down
