name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

defaults:
  run:
    shell: bash

# Cancel previous running actions for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  checks:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    container:
      image: faasm.azurecr.io/cli:0.21.0
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
        # We need to set the safe git directory as formatting relies on git-ls
        # See actions/checkout#766
      - name: "Set the GH workspace as a safe git directory"
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global --add safe.directory "$GITHUB_WORKSPACE/faabric"
          git config --global --add safe.directory "$GITHUB_WORKSPACE/cpp"
          git config --global --add safe.directory "$GITHUB_WORKSPACE/python"
      # Formatting checks
      - name: "Code formatting check"
        run: ./bin/inv_wrapper.sh format-code --check
      # Sanity checks
      - name: "Check that all the submodules point to their 'main' branch"
        run: ./bin/inv_wrapper.sh git.check-submodule-branch

  docs:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    container:
      image: faasm.azurecr.io/cli:0.21.0
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: "Build docs"
        run: ./bin/inv_wrapper.sh docs

  # Work out if we need to re-cross-compile the WASM functions used in the
  # tests. We need to run `cpp-funcs` if there's a change in the `clients/cpp`
  # submodule, and `py-funcs` if there's a change in the `clients/python`
  # submodule. Additionally, even if there are no changes, we also want to run
  # `clients/cpp` and `clients/python` if the WASM cache is not in place
  wasm-funcs-cache:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    outputs:
      needs-cpp-wasm: ${{ (steps.filter.outputs.cpp-changed == 'true') || (steps.wasm-cpp-cache.outputs.cache-hit != 'true') }}
      needs-py-wasm: ${{ (steps.filter.outputs.py-changed == 'true') || (steps.wasm-py-cache.outputs.cache-hit != 'true') }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    # Check if any of the submodules have been modified
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          cpp-changed:
            - './clients/cpp/**'
          py-changed:
            - './clients/python/**'
    # Even if they have not been modified, check whether the WASM cache is
    # available
    - name: "Get CPP/Python commits"
      id: submodule-commit
      run: |
        echo "cpp-commit=$(git submodule status ./clients/cpp | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
        echo "py-commit=$(git submodule status ./clients/python | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
    - uses: actions/cache/restore@v4
      id: wasm-cpp-cache
      with:
        path: /usr/local/faasm/wasm
        key: wasm-cpp-${{ steps.submodule-commit.outputs.cpp-commit }}
        lookup-only: true
    - uses: actions/cache/restore@v4
      id: wasm-py-cache
      with:
        path: /usr/local/faasm/wasm/python
        key: wasm-py-${{ steps.submodule-commit.outputs.py-commit }}
        lookup-only: true

  cpp-funcs:
    needs: wasm-funcs-cache
    if: ${{ needs.wasm-funcs-cache.outputs.needs-cpp-wasm == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: faasm.azurecr.io/cpp-sysroot:0.3.1
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Build C++ functions"
        run: ./bin/inv_wrapper.sh func.local
        working-directory: ${{ github.workspace }}/clients/cpp
      - name: "Build libfake"
        run: ./bin/inv_wrapper.sh libfake
        working-directory: ${{ github.workspace }}/clients/cpp
      - name: "Build libfake"
        run: ./bin/inv_wrapper.sh libfake
        working-directory: ${{ github.workspace }}/clients/cpp
      - name: "Prepare Cpp WASM cache"
        id: submodule-commit
        run: |
          # Github Caches are versioned with a combination of the key, the
          # cache path, and the compression algorithm. We install `zstd` to
          # get the same version hash than in the step that runs outside of
          # the containers
          apt install -y zstd
          # There's a misalignment between the github.workspace value reported
          # in the `run` command, and the one in the `working-directory` one,
          # so we use the environment variable here instead. See:
          # https://github.com/actions/runner/issues/2058#issuecomment-1541828550
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          echo "cpp-commit=$(git submodule status ./clients/cpp | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
          # We move the libfake shared library to the WASM dir to use only one
          # cache
          mv /usr/local/faasm/runtime_root/lib/fake /usr/local/faasm/wasm/
        working-directory: ${{ github.workspace }}
      - name: "Cpp WASM cache"
        uses: actions/cache@v4
        id: cpp-wasm-cache
        with:
          path: /usr/local/faasm/wasm
          key: wasm-cpp-${{ steps.submodule-commit.outputs.cpp-commit }}

  py-funcs:
    needs: wasm-funcs-cache
    if: ${{ needs.wasm-funcs-cache.outputs.needs-py-wasm == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: faasm.azurecr.io/cpython:0.3.1
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Build CPython function"
        run: ./bin/inv_wrapper.sh cpython.func
        working-directory: ${{ github.workspace }}/clients/python
      - name: "Put Python functions in place"
        run: ./bin/inv_wrapper.sh func.upload-all --local
        working-directory: ${{ github.workspace }}/clients/python
      - name: "Prepare Python WASM cache"
        id: submodule-commit
        run: |
          apt install -y zstd
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          echo "py-commit=$(git submodule status ./clients/python | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
          # We temporarily move the pyfuncs to only use one cache
          mv /usr/local/faasm/shared/pyfuncs /usr/local/faasm/wasm/python/
        working-directory: ${{ github.workspace }}
      - name: "Python WASM cache"
        uses: actions/cache@v4
        id: py-wasm-cache
        with:
          path: /usr/local/faasm/wasm/python
          key: wasm-py-${{ steps.submodule-commit.outputs.py-commit }}

  conan-cache:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    container:
      image: faasm.azurecr.io/cli:0.21.0
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    steps:
      - name: "Check-out code"
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: "Conan cache"
        uses: faasm/conan-cache-action@v3
      - name: "Build Conan dependencies to be shared by all runs"
        run: ./bin/inv_wrapper.sh dev.cmake --build Debug --clean

  code-coverage:
    needs: [cpp-funcs, py-funcs, conan-cache]
    # Run the tests both if the dependencies have succeeded or have been
    # skipped
    if:
      always() &&
      !cancelled() &&
      github.event.pull_request.draft == false &&
      (needs.cpp-funcs.result == 'success' || needs.cpp-funcs.result == 'skipped') &&
      (needs.py-funcs.result == 'success' || needs.py-funcs.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
    container:
      image: faasm.azurecr.io/cli:0.21.0
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    services:
      redis:
        image: faasm.azurecr.io/redis:0.21.0
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
      minio:
        image: faasm.azurecr.io/minio:0.21.0
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
    steps:
      - name: "Check out code"
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: "Conan cache"
        uses: faasm/conan-cache-action@v3
      - name: "Ping redis"
        run: redis-cli -h redis ping
      - name: "Ping minio"
        run: curl -f http://minio:9000/minio/health/live
      # Download wasm generated by previous steps
      - name: "Get CPP/Python commits"
        id: submodule-commit
        run: |
          apt install -y zstd
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "cpp-commit=$(git submodule status ./clients/cpp | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
          echo "py-commit=$(git submodule status ./clients/python | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
      - name: "Get Cpp WASM cache"
        uses: actions/cache/restore@v4
        id: cpp-wasm-cache
        with:
          path: /usr/local/faasm/wasm
          key: wasm-cpp-${{ steps.submodule-commit.outputs.cpp-commit }}
      - name: "Get Python WASM cache"
        uses: actions/cache/restore@v4
        id: py-wasm-cache
        with:
          path: /usr/local/faasm/wasm/python
          key: wasm-py-${{ steps.submodule-commit.outputs.py-commit }}
      # Move libfake and pyfuncs that are misplaced to only use one cache
      - name: "Post-WASM cache"
        run: |
          mv /usr/local/faasm/wasm/fake /usr/local/faasm/runtime_root/lib/fake
          mkdir -p /usr/local/faasm/shared
          mv /usr/local/faasm/wasm/python/pyfuncs /usr/local/faasm/shared/pyfuncs
      # Cache contains architecture-specific machine code
      - name: "CPU info"
        run: cat /proc/cpuinfo
      - name: "Get CPU model name"
        run: echo "CPU_MODEL=$(./bin/print_cpu.sh)" >> $GITHUB_ENV
      - name: "Print CPU model"
        run: echo "${{ env.CPU_MODEL}}"
      - name: "Configure machine code cache"
        uses: actions/cache@v4
        with:
          path: /usr/local/faasm/object
          key: ${{ env.CPU_MODEL }}-machine-code-${{ secrets.CACHE_VERSION }}
      # Code build with coverage
      - name: "Build dev tools with code coverage"
        run: ./bin/inv_wrapper.sh dev.tools --build Debug --clean --coverage
      # Environment set-up
      - name: "Run codegen for the tests"
        run: ./bin/inv_wrapper.sh codegen.tests
      - name: "Clear existing pyc files"
        run: ./bin/inv_wrapper.sh python.clear-runtime-pyc
      # Test run
      - name: "Run the tests"
        run: ./bin/inv_wrapper.sh tests
        env:
          LLVM_PROFILE_FILE: faasm.profraw
      - name: "Generate code coverage report"
        run: ./bin/inv_wrapper.sh dev.coverage-report --file-in faasm.profraw --file-out coverage.txt
      - name: "Upload coverage report to CodeCov"
        uses: codecov/codecov-action@v4
        with:
          # Note that this secret is specific to this repository
          token: ${{ secrets.CODECOV_TOKEN }}

  tests:
    needs: [cpp-funcs, py-funcs, conan-cache]
    # Run the tests both if the dependencies have succeeded or have been
    # skipped
    if: |
      always() &&
      !cancelled() &&
      github.event.pull_request.draft == false &&
      (needs.cpp-funcs.result == 'success' || needs.cpp-funcs.result == 'skipped') &&
      (needs.py-funcs.result == 'success' || needs.py-funcs.result == 'skipped')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitiser: [None, Address, Thread, Undefined]
    env:
      HOST_TYPE: ci
    container:
      image: faasm.azurecr.io/cli:0.21.0
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    services:
      redis:
        image: faasm.azurecr.io/redis:0.21.0
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
      minio:
        image: faasm.azurecr.io/minio:0.21.0
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
    steps:
      - name: "Check out code"
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: "Conan cache"
        uses: faasm/conan-cache-action@v3
      - name: "Ping redis"
        run: redis-cli -h redis ping
      - name: "Ping minio"
        run: curl -f http://minio:9000/minio/health/live
      # Download wasm generated by previous steps
      - name: "Get CPP/Python commits"
        id: submodule-commit
        run: |
          apt install -y zstd
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "cpp-commit=$(git submodule status ./clients/cpp | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
          echo "py-commit=$(git submodule status ./clients/python | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
      - name: "Get Cpp WASM cache"
        uses: actions/cache/restore@v4
        id: cpp-wasm-cache
        with:
          path: /usr/local/faasm/wasm
          key: wasm-cpp-${{ steps.submodule-commit.outputs.cpp-commit }}
      - name: "Get Python WASM cache"
        uses: actions/cache/restore@v4
        id: py-wasm-cache
        with:
          path: /usr/local/faasm/wasm/python
          key: wasm-py-${{ steps.submodule-commit.outputs.py-commit }}
      # Move libfake and pyfuncs that are misplaced to only use one cache
      - name: "Post-WASM cache"
        run: |
          mv /usr/local/faasm/wasm/fake /usr/local/faasm/runtime_root/lib/fake
          mkdir -p /usr/local/faasm/shared
          mv /usr/local/faasm/wasm/python/pyfuncs /usr/local/faasm/shared/pyfuncs
      # Cache contains architecture-specific machine code
      - name: "CPU info"
        run: cat /proc/cpuinfo
      - name: "Get CPU model name"
        run: echo "CPU_MODEL=$(./bin/print_cpu.sh)" >> $GITHUB_ENV
      - name: "Print CPU model"
        run: echo "${{ env.CPU_MODEL}}"
      - name: "Configure machine code cache"
        uses: actions/cache@v4
        id: machine-code-cache
        with:
          path: /usr/local/faasm/object
          key: ${{ env.CPU_MODEL }}-machine-code-${{ secrets.CACHE_VERSION }}
      # We only re-build the codegen binaries if `clients/cpp` or
      # `clients/python` have changed, or (ii) `cpp` and `python` have not
      # changed, but we have a cache miss (i.e. new CPU).
      - name: "Run codegen for the tests"
        if: |
          (${{ needs.wasm-funcs-cache.outputs.cpp == 'true' }} || \
           ${{ needs.wasm-funcs-cache.outputs.python == 'true' }}) \
           || steps.machine-code-cache.outputs.cache-hit != 'true'
        run: |
          ./bin/inv_wrapper.sh dev.cc codegen_func dev.cc codegen_shared_obj
          ./bin/inv_wrapper.sh codegen.tests
      - name: "Clear existing pyc files"
        run: ./bin/inv_wrapper.sh python.clear-runtime-pyc
      # Tests build (Debug required for tests)
      - name: "Re-run CMake with sanitiser set"
        run: ./bin/inv_wrapper.sh dev.cmake --clean --build Debug --sanitiser ${{ matrix.sanitiser }}
      - name: "Build only the tests target"
        run: ./bin/inv_wrapper.sh dev.cc tests
      # Run tests
      - name: "Run the tests"
        run: ./bin/inv_wrapper.sh tests

  sgx-tests:
    needs: [cpp-funcs, py-funcs, conan-cache]
    # Run the tests both if the dependencies have succeeded or have been
    # skipped
    if:
      always() &&
      !cancelled() &&
      github.event.pull_request.draft == false &&
      (needs.cpp-funcs.result == 'success' || needs.cpp-funcs.result == 'skipped') &&
      (needs.py-funcs.result == 'success' || needs.py-funcs.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
    container:
      image: faasm.azurecr.io/cli-sgx-sim:0.21.0
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    services:
      redis:
        image: faasm.azurecr.io/redis:0.21.0
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
      minio:
        image: faasm.azurecr.io/minio:0.21.0
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
    steps:
      - name: "Check out code"
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: "Conan cache"
        uses: faasm/conan-cache-action@v3
      - name: "Ping redis"
        run: redis-cli -h redis ping
      - name: "Ping minio"
        run: curl -f http://minio:9000/minio/health/live
      # Download wasm generated by previous steps
      - name: "Get CPP/Python commits"
        id: submodule-commit
        run: |
          apt install -y zstd
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "cpp-commit=$(git submodule status ./clients/cpp | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
          echo "py-commit=$(git submodule status ./clients/python | cut '-d ' -f 2)" >> $GITHUB_OUTPUT
      - name: "Get Cpp WASM cache"
        uses: actions/cache/restore@v4
        id: cpp-wasm-cache
        with:
          path: /usr/local/faasm/wasm
          key: wasm-cpp-${{ steps.submodule-commit.outputs.cpp-commit }}
      - name: "Get Python WASM cache"
        uses: actions/cache/restore@v4
        id: py-wasm-cache
        with:
          path: /usr/local/faasm/wasm/python
          key: wasm-py-${{ steps.submodule-commit.outputs.py-commit }}
      # Move libfake and pyfuncs that are misplaced to only use one cache
      - name: "Post-WASM cache"
        run: |
          mv /usr/local/faasm/wasm/fake /usr/local/faasm/runtime_root/lib/fake
          mkdir -p /usr/local/faasm/shared
          mv /usr/local/faasm/wasm/python/pyfuncs /usr/local/faasm/shared/pyfuncs
      # Cache contains architecture-specific machine code
      - name: "CPU info"
        run: cat /proc/cpuinfo
      - name: "Get CPU model name"
        run: echo "CPU_MODEL=$(./bin/print_cpu.sh)" >> $GITHUB_ENV
      - name: "Print CPU model"
        run: echo "${{ env.CPU_MODEL}}"
      - name: "Configure machine code cache"
        uses: actions/cache@v4
        with:
          path: /usr/local/faasm/object
          key: ${{ env.CPU_MODEL }}-machine-code-${{ secrets.CACHE_VERSION }}
      # Code build (Debug required for tests)
      - name: "Build dev tools"
        run: |
          ./bin/inv_wrapper.sh dev.cmake --build Debug --sgx Simulation --clean
          ./bin/inv_wrapper.sh dev.cc codegen_func dev.cc codegen_shared_obj dev.cc tests
      # Environment set-up
      - name: "Run codegen for the tests"
        run: ./bin/inv_wrapper.sh codegen.tests
      - name: "Clear existing pyc files"
        run: ./bin/inv_wrapper.sh python.clear-runtime-pyc
      # Test run
      - name: "Run the tests"
        run: ./bin/inv_wrapper.sh tests

  dist-tests:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        wasm_vm: [wamr, wavm]
    env:
      CONAN_CACHE_MOUNT_SOURCE: ~/.conan
      FAASM_INI_FILE: ./faasm.ini
      FAASM_VERSION: 0.21.0
      FAASM_WASM_VM: ${{ matrix.wasm_vm }}
    steps:
      - uses: csegarragonz/set-compose-version-action@main
        with:
          compose-version: "2.22.0"
      # The distributed tests use (pull) lots of docker images, so we may
      # run out of disk space, use this action to free space beforehand
      - name: "Maximize build space"
        uses: easimon/maximize-build-space@master
        with:
          # Leave 25 GB for the / partition for docker images (stored under
          # /var/lib/docker)
          root-reserve-mb: 25600
          remove-android: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: "Install faasmctl"
        run: pip3 install faasmctl==0.28.0
      # Cache contains architecture-specific machine code
      - name: "Get CPU model name"
        run: echo "CPU_MODEL=$(./bin/print_cpu.sh)" >> $GITHUB_ENV
      - name: "Print CPU model"
        run: echo "${{ env.CPU_MODEL}}"
      - name: "Configure S3 cache"
        uses: actions/cache@v4
        with:
          path: ./dev/minio/data/faasm
          key: ${{ env.CPU_MODEL }}-s3-data-${{ secrets.CACHE_VERSION }}
      - name: "Start a Faasm cluster to run the distributed tests"
        run: faasmctl deploy.dist-tests --mount-source .
      - name: "Build dist-tests and other targets"
        run: faasmctl cli.faasm --cmd "./deploy/dist-test/build_internal.sh"
      - name: "Re-start the services to pick up new binaries (if necessary)"
        run: faasmctl restart -s upload -s dist-test-server
      # This can fail when the container isn't ready, so we want to retry
      - name: "Wait for upload server to be available"
        run: |
          (echo "Attempt 1" && faasmctl cli.faasm --cmd "./deploy/local/wait_for_upload.sh upload 8002") || \
          (echo "Attempt 2" && faasmctl cli.faasm --cmd "./deploy/local/wait_for_upload.sh upload 8002") || \
          (echo "Attempt 3" && faasmctl cli.faasm --cmd "./deploy/local/wait_for_upload.sh upload 8002") || \
          (echo "Wait for upload failed after retries" && faasmctl logs -s upload && exit 1)
      - name: "Build and upload functions for tests"
        run: ./deploy/dist-test/upload.sh
      - name: "Run tests"
        run: ./deploy/dist-test/run.sh
      - name: "Unconditional deletion of the cluster"
        if: always()
        run: faasmctl delete

  e2e-tests:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        faasm_wasm_vm: [wamr, wavm]
        mount_source: [on, off]
    env:
      FAASM_MOUNT_SOURCE: ${{ matrix.mount_source }}
      FAASM_WASM_VM: ${{ matrix.faasm_wasm_vm }}
    steps:
      - uses: csegarragonz/set-compose-version-action@main
        with:
          compose-version: "2.22.0"
      - name: "Maximize build space"
        uses: easimon/maximize-build-space@master
        with:
          # Leave 25 GB for the / partition for docker images (stored under
          # /var/lib/docker)
          root-reserve-mb: 25600
          remove-android: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Run e2e tests"
        run: ./tests/e2e/run.sh
        env:
          FAASM_SOURCE: ${{ github.workspace }}
