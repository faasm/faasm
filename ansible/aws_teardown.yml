---

# -------------------------------------------
# Some bits of AWS are orders of magnitude more expensive than others
# The worst offenders are Elasticache and NAT gateways by far, but this
# script gets rid of some other bits too for good measure.
# -------------------------------------------

- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    ansible_python_interpreter: "../venv/bin/python3"
  tasks:

    # Unfortunately we need to make sure the VPC already exists to get its ID
    - name: "Make sure VPC exists"
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ aws_region }}"
        validate_certs: no
        dns_support: yes
      register: vpc

    # Another hack to get the public subnet ID
    - name: "Make sure public subnet exists"
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        cidr: "{{ public_subnet_cidr }}"
        map_public: yes
        resource_tags:
          Name: "{{ public_subnet_name }}"
      register: public_subnet

    # Another hack. To release the elastic IP related to the NAT gateway
    # we need its ID, therefore have to make sure it exists before
    # deleting it
    - name: "Make sure NAT gateway exists"
      ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{ public_subnet.subnet.id }}"
        wait: yes
        region: "{{ aws_region }}"
        if_exist_do_not_create: true
      register: nat_gateway

    # We can start deleting here
    - name: "Delete SQS queue"
      sqs_queue:
        name: "{{ sqs_queue_name }}-{{ item }}"
        region: "{{ aws_region }}"
        state: absent
      with_items:
        - "state"
        - "queue"

    - name: "Delete Elasticache instances"
      elasticache:
        name: "{{ elasticache_name }}-{{ item }}"
        region: "{{ aws_region }}"
        engine: redis
        state: absent
      with_items:
        - "state"
        - "queue"

    - name: "Remove Elasticache subnet group"
      elasticache_subnet_group:
        state: "absent"
        name: "{{ elasticache_name }}-subnet"
        region: "{{ aws_region }}"

    - name: "Clear route table and subnets"
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: absent

    - name: "Remove NAT gateway from public subnet"
      ec2_vpc_nat_gateway:
        state: absent
        subnet_id: "{{ public_subnet.subnet.id }}"
        nat_gateway_id: "{{ nat_gateway.nat_gateway_id }}"
        release_eip: yes
        wait: yes
        region: "{{ aws_region }}"
