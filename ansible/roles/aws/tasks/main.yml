---

- name: "Create VPC"
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ aws_region }}"
    validate_certs: no
    dns_support: yes
  register: vpc

- name: "Create public subnet"
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    cidr: "{{ public_subnet_cidr }}"
    map_public: yes
    resource_tags:
      Name: "{{ public_subnet_name }}"
  register: public_subnet

- name: "Create internet gateway"
  ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    resource_tags:
      Name: "{{ internet_gateway_name }}"
  register: igw

- name: "Create default route to internet gateway from public subnet"
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    subnets:
      - "{{ public_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id  }}"
    tags:
      Name: "Default route to internet"

- name: "Create NAT gateway in public subnet (and assign elastic IP)"
  ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ public_subnet.subnet.id }}"
    wait: yes
    region: "{{ aws_region }}"
    if_exist_do_not_create: true
  register: nat_gateway

- name: "Create private subnet"
  ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    cidr: "{{ private_subnet_cidr }}"
    map_public: no
    resource_tags:
      Name: "{{ private_subnet_name }}"
  register: private_subnet

- name: "Create default route to NAT gateway from private subnet"
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    subnets:
      - "{{ private_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ nat_gateway.nat_gateway_id  }}"
    tags:
      Name: "Default route to NAT gateway"

- name: "Create Security Group"
  ec2_group:
    name: "{{ security_group_name }}"
    description: "Faasm security group"
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto:
      - proto: tcp
        ports:
          - 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
          - 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
          - 6379
        cidr_ip: 0.0.0.0/0
  register: security_group

- name: "Create dead letter SQS queue"
  sqs_queue:
    name: "{{ sqs_queue_name }}-dead"
    region: "{{ aws_region }}"
  register: dead_queue

- name: "Create SQS queue"
  sqs_queue:
    name: "{{ sqs_queue_name }}"
    region: "{{ aws_region }}"
    default_visibility_timeout: 600
    redrive_policy:
      deadLetterTargetArn: "{{ dead_queue.queue_arn }}"
      maxReceiveCount: 2

- name: "Create S3 bucket"
  s3_bucket:
    name: "{{ item }}"
    region: "{{ aws_region }}"
  with_items:
    - "{{ s3_runtime_bucket }}"
    - "{{ s3_state_bucket }}"

- name: "Create Elasticache subnet group"
  elasticache_subnet_group:
    state: "present"
    name: "{{ elasticache_name }}-subnet"
    description: "Private subnet group"
    region: "{{ aws_region }}"
    subnets:
      - "{{ private_subnet.subnet.id }}"
  register: ec_subnet

- debug:
    var: ec_subnet

- name: "Create Lambda IAM role"
  iam_role:
    name: "{{ lambda_role_name }}"
    region: "{{ aws_region }}"
    state: present
    assume_role_policy_document: "{{ lookup('file','policy.json') }}"
    managed_policy:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole  # Elasticache
      - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole   # SQS
      - arn:aws:iam::aws:policy/AWSLambdaExecute                              # S3
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole                    # Invoke other lambdas

# Note, we're not waiting here but elasticache instances take ages to set up
- name: "Create Elasticache instances"
  elasticache:
    name: "{{ elasticache_name }}-{{ item }}"
    region: "{{ aws_region }}"
    engine: redis
    state: present
    node_type: cache.t2.medium
    num_nodes: 1
    cache_subnet_group: "{{ elasticache_name }}-subnet"
    security_group_ids:
      - "{{ security_group.group_id }}"
    wait: no
  with_items:
    - "state"
    - "queue"

