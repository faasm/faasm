// Annoyingly we have to redefine these here
#define FAASM_SGX 1
#define FAASM_SGX_ATTESTATION 0
#define FAASM_SGX_WAMR_WASI_LIBC 0
#define FAASM_DOCKER 1

enclave{
#if(FAASM_DOCKER)
    include "/usr/local/code/faasm/include/sgx/faasm_sgx_error.h"
    include "/usr/local/code/faasm/include/sgx/faasm_sgx_attestation.h"
    include "/build/faasm/_deps/wamr_ext-src/core/iwasm/include/wasm_export.h"
#else
    include "../../../include/sgx/faasm_sgx_error.h"
    include "../../../include/sgx/faasm_sgx_attestation.h"
    include "../../_deps/wamr_ext-src/core/iwasm/include/wasm_export.h"
#endif
    from "sgx_tstdc.edl" import *;
    from "sgx_pthread.edl" import *;
#if(FAASM_SGX_WAMR_WASI_LIBC)
    from "sgx_wamr.edl" import *;
#endif

    trusted{
        public faasm_sgx_status_t faasm_sgx_enclave_unload_module(
            uint32_t thread_id
        );

        public faasm_sgx_status_t faasm_sgx_enclave_call_function(
            uint32_t thread_id
        );

#if(FAASM_SGX_ATTESTATION)
        public faasm_sgx_status_t faasm_sgx_enclave_load_module(
            [user_check]    const void *wasm_opcode_ptr,
                            uint32_t wasm_opcode_size,
            [out]           uint32_t *thread_id,
            [user_check]    sgx_wamr_msg_t **response_ptr
        );
#else
        public faasm_sgx_status_t faasm_sgx_enclave_load_module(
            [in, size=wasm_opcode_size]     const void *wasm_opcode_ptr,
                                            uint32_t wasm_opcode_size,
            [out]                           uint32_t *thread_id
        );
#endif

        public faasm_sgx_status_t faasm_sgx_enclave_init_wamr(void);

        public faasm_sgx_status_t faasm_sgx_enclave_crypto_checks(void);
    };

    untrusted{
        void ocall_printf([in, string] const char* msg);

#if(FAASM_SGX_ATTESTATION)
        faasm_sgx_status_t ocall_init_crt(void);

        faasm_sgx_status_t ocall_send_msg(
            [in, size=msg_len]  sgx_wamr_msg_t* msg,
                                uint32_t msg_len
        );
#endif
        uint64_t ocall_faasm_read_state(
            [in, string]            char* key,
            [out, size=buffer_len]  uint8_t* buffer_ptr,
                                    uint32_t buffer_len
        );

        void ocall_faasm_read_appended_state(
            [in, string]            char* key,
            [out, size=buffer_len]  uint8_t* buffer_ptr,
                                    uint32_t buffer_len,
                                    uint32_t element_num
        );

        void ocall_faasm_read_state_offset(
            [in, string]            char* key,
                                    uint64_t total_len,
                                    uint64_t offset,
            [out, size=buffer_len]  uint8_t* buffer_ptr,
                                    uint32_t buffer_len
        );

        void ocall_faasm_write_state(
            [in, string]            char* key,
            [in, size=buffer_len]   uint8_t* buffer_ptr,
                                    uint32_t buffer_len
        );

        void ocall_faasm_append_state(
            [in, string]            char* key,
            [in, size=buffer_len]   uint8_t* buffer_ptr,
                                    uint32_t buffer_len
        );

        void ocall_faasm_clear_appended_state([in, string] char* key);

        void ocall_faasm_write_state_offset(
            [in, string]            char* key,
                                    uint64_t total_len,
                                    uint64_t offset,
            [in, size=buffer_len]   uint8_t* buffer_ptr,
                                    uint32_t buffer_len
        );

        void ocall_faasm_flag_state_dirty(
            [in, string]    char* key,
                            uint64_t total_len
        );

        void ocall_faasm_flag_state_offset_dirty(
            [in, string]    char* key,
                            uint64_t total_len,
                            uint64_t offset,
                            uint64_t len
        );

        void ocall_faasm_push_state([in, string] char* key);

        void ocall_faasm_push_state_partial([in, string] char* key);

        void ocall_faasm_push_state_partial_mask(
            [in, string]    char* key,
            [in, string]    char* mask_key
        );

        void ocall_faasm_pull_state([in, string] char* key, uint64_t state_len);

        void ocall_faasm_lock_state_global([in, string] char* key);

        void ocall_faasm_unlock_state_global([in, string] char* key);

        void ocall_faasm_lock_state_read([in, string] char* key);

        void ocall_faasm_unlock_state_read([in, string] char* key);

        void ocall_faasm_lock_state_write([in, string] char* key);

        void ocall_faasm_unlock_state_write([in, string] char* key);

        int ocall_faasm_read_input(
            [in, out, size=buffer_size]     uint8_t* buffer,
                                            unsigned int buffer_size
        );

        void ocall_faasm_write_output(
            [in, size=output_size]  uint8_t* output,
                                    unsigned int output_size
        );

        unsigned int ocall_faasm_chain_name(
            [in, string]            const char* name,
            [in, size=input_size]   uint8_t* input,
                                    long input_size
        ) allow(faasm_sgx_enclave_load_module);

        unsigned int ocall_faasm_chain_ptr(
                                    int wasmFuncPtr,
            [in, size=input_size]   uint8_t* input,
                                    long input_size
        );

        unsigned int ocall_faasm_await_call(unsigned int call_id);

        unsigned int ocall_faasm_await_call_output(
                                        unsigned int call_id,
            [out, size=buffer_size]     uint8_t* buffer,
                                        unsigned int buffer_size
        );

        int32_t ocall_sbrk(int32_t increment);
    };
};
